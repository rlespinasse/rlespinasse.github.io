<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tooltip on Romain Lespinasse</title><link>https://www.romainlespinasse.dev/tags/tooltip/</link><description>Recent content in tooltip on Romain Lespinasse</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a MIT License.</copyright><lastBuildDate>Fri, 18 Oct 2019 10:00:00 +0100</lastBuildDate><atom:link href="https://www.romainlespinasse.dev/tags/tooltip/index.xml" rel="self" type="application/rss+xml"/><item><title>Makefile | Create a wrapper task</title><link>https://www.romainlespinasse.dev/posts/makefile-wrapper/</link><pubDate>Fri, 18 Oct 2019 10:00:00 +0100</pubDate><guid>https://www.romainlespinasse.dev/posts/makefile-wrapper/</guid><description>In makefile, you can define tasks and run them individually
make run-task1 run-task2 run-task3
run-task1: @echo &amp;#34;run task 1&amp;#34; run-task2: @echo &amp;#34;run task 2&amp;#34; run-task3: @echo &amp;#34;run task 3&amp;#34; When you want to run tasks from another tasks (e.g. make run-all-tasks), you can
use makefile prerequisites mechanism run-all-tasks: run-task1 run-task2 run-task3 use sub-command line with $(MAKE) run-all-tasks: @$(MAKE) run-task1 @$(MAKE) run-task2 @$(MAKE) run-task3 You can also create a wrapper task to run all tasks with a specific naming.</description></item><item><title>Makefile | How to check a mandatory variable</title><link>https://www.romainlespinasse.dev/posts/makefile-guard/</link><pubDate>Sun, 14 Jul 2019 10:00:00 +0200</pubDate><guid>https://www.romainlespinasse.dev/posts/makefile-guard/</guid><description>When you use a variable in a Makefile task and you want to make it mandatory and check it before run the effective task,
You can guard it.
task-who-need-SPECIFIC_ENVVAR: guard-SPECIFIC_ENVVAR @echo ${SPECIFIC_ENVVAR} You only need to add the following task
guard-%: @ if [ &amp;#34;${${*}}&amp;#34; = &amp;#34;&amp;#34; ]; then \ echo &amp;#34;Environment variable $*not set&amp;#34;; \ exit 1; \ fi So when you run it, the guard will prevent to run the task</description></item></channel></rss>