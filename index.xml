<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Romain Lespinasse</title><link>https://www.romainlespinasse.dev/</link><description>Recent content on Romain Lespinasse</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a MIT License.</copyright><lastBuildDate>Thu, 07 Nov 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://www.romainlespinasse.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Personal projects</title><link>https://www.romainlespinasse.dev/personal-projects/</link><pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate><guid>https://www.romainlespinasse.dev/personal-projects/</guid><description>This blog is itself a project based on hugo with some github actions to automate it.
In term of automation, I play with Github Actions
to slug some environment variables : Github Slug Action. to add track capabilities between issues : Issues Tracker Action. In golang:
hoff serve as an engine to run workflows composed of high order functions, You can manipulate some bytes with byteslice. Because I love to play with bash scripts, michel help to structure all your scripts.</description></item><item><title>Hugo | Generate your own site</title><link>https://www.romainlespinasse.dev/posts/gohugo/</link><pubDate>Sun, 27 Oct 2019 10:42:00 +0200</pubDate><guid>https://www.romainlespinasse.dev/posts/gohugo/</guid><description>I brought a domain name romainlespinasse.dev, so naturally I search to build a website, a small one.
to give access to some social links about me, to make available all my posts across blog platforms (Company blog site, Medium, Dev.to). I choose
to build a static site with Hugo support by Continuous Delivery using Github Actions to deploy it on GitHub User site. Step 1 | Build the site After installing Hugo, I bootstrap a site for romainlespinasse.</description></item><item><title>Makefile | Create a wrapper task</title><link>https://www.romainlespinasse.dev/posts/makefile-wrapper/</link><pubDate>Fri, 18 Oct 2019 10:00:00 +0100</pubDate><guid>https://www.romainlespinasse.dev/posts/makefile-wrapper/</guid><description>In makefile, you can define tasks and run them individually
make run-task1 run-task2 run-task3
run-task1: @echo &amp;#34;run task 1&amp;#34; run-task2: @echo &amp;#34;run task 2&amp;#34; run-task3: @echo &amp;#34;run task 3&amp;#34; When you want to run tasks from another tasks (e.g. make run-all-tasks), you can
use makefile prerequisites mechanism run-all-tasks: run-task1 run-task2 run-task3 use sub-command line with $(MAKE) run-all-tasks: @$(MAKE) run-task1 @$(MAKE) run-task2 @$(MAKE) run-task3 You can also create a wrapper task to run all tasks with a specific naming.</description></item><item><title>Hacktoberfest | Let's go for 2019</title><link>https://www.romainlespinasse.dev/posts/hacktoberfest-2019/</link><pubDate>Mon, 30 Sep 2019 10:42:00 +0200</pubDate><guid>https://www.romainlespinasse.dev/posts/hacktoberfest-2019/</guid><description>Once again, I'm participate to the 2019 edition of the Hacktoberfest.
This month, I will focus on my open-source projects
byteslice, a go library to manipulate a byte array, hoff, a go library to run workflows with high order functions - a new name is required :) , and the new one bitframe, a go library to manipulate bit frames using data protocol with encoder and decoder capabilities. But I don't forget to also work on my shell project : michel.</description></item><item><title>Makefile | How to check a mandatory variable</title><link>https://www.romainlespinasse.dev/posts/makefile-guard/</link><pubDate>Sun, 14 Jul 2019 10:00:00 +0200</pubDate><guid>https://www.romainlespinasse.dev/posts/makefile-guard/</guid><description>When you use a variable in a Makefile task and you want to make it mandatory and check it before run the effective task,
You can guard it.
task-who-need-SPECIFIC_ENVVAR: guard-SPECIFIC_ENVVAR @echo ${SPECIFIC_ENVVAR} You only need to add the following task
guard-%: @ if [ &amp;#34;${${*}}&amp;#34; = &amp;#34;&amp;#34; ]; then \ echo &amp;#34;Environment variable $*not set&amp;#34;; \ exit 1; \ fi So when you run it, the guard will prevent to run the task</description></item><item><title>Antora | Replace your wiki with a documentation site</title><link>https://www.romainlespinasse.dev/posts/antora-en/</link><pubDate>Tue, 11 Sep 2018 10:42:00 +0200</pubDate><guid>https://www.romainlespinasse.dev/posts/antora-en/</guid><description>Bonjour, la version française de cet article peut être lue sur ce site
No matter what your IT project is, there will always be a need to store some documentation. The choice to use a wiki is quite common in the corporate world.
Let's talk about you, developer on one of these programs, is documentation of your different projects managed by an easily accessible and editable wiki?
If you look at the content of this wiki, you will probably find:</description></item><item><title>Antora | Remplacer votre wiki par un site de documentation</title><link>https://www.romainlespinasse.dev/posts/antora/</link><pubDate>Wed, 18 Apr 2018 10:42:00 +0200</pubDate><guid>https://www.romainlespinasse.dev/posts/antora/</guid><description>Hi, the english version of this article can be read on this site
Peu importe votre projet informatique, il y aura toujours un besoin de stocker de la documentation. Le choix d'utiliser un wiki est assez courant en entreprise.
Parlons de vous, développeur sur un de ces programmes, la documentation des différents projets est-elle gérée par un wiki facilement accessible et éditable?
Et si vous regardez le contenu de ce wiki, vous y trouverez surement :</description></item><item><title>Homebrew | Utilisez un package manager sous macOS</title><link>https://www.romainlespinasse.dev/posts/homebrew/</link><pubDate>Tue, 28 Feb 2017 10:42:00 +0100</pubDate><guid>https://www.romainlespinasse.dev/posts/homebrew/</guid><description>Votre société ou votre client vient de vous confier un macbook pour travailler, il ne vous reste plus qu'à installer tout un ensemble de programmes pour commencer.
Sous linux, vous auriez un gestionnaire de formulas qui ferait bien l'affaire pour aller plus vite. Mais sous macOS, pas de apt-get, pas de yum, vous voilà parti pour installer tout cela à la main.
Pas de crainte, des gestionnaires de formulas existent aussi pour macOS comme Homebrew (ou MacPorts)</description></item></channel></rss>